<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ReorderFlow Dashboard</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .spinner {
            border: 3px solid #f3f4f6;
            border-top: 3px solid #2563eb;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef, createContext, useContext } = React;

        // Replace with your actual Supabase credentials
        const SUPABASE_URL = 'https://esxnvihzvytfapywcyss.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVzeG52aWh6dnl0ZmFweXdjeXNzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjA0MDQ5NjUsImV4cCI6MjAzNTk4MDk2NX0.CuJqbhp-VzQJgn6xXwZ-6UIDYhUGP6ub71QSzfBqCkQ';
        
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // Auth Context
        const AuthContext = createContext();

        function AuthProvider({ children }) {
            const [user, setUser] = useState(null);
            const [loading, setLoading] = useState(true);

            useEffect(() => {
                // Get initial session
                supabase.auth.getSession().then(({ data: { session } }) => {
                    setUser(session?.user ?? null);
                    setLoading(false);
                });

                // Listen for auth changes
                const { data: { subscription } } = supabase.auth.onAuthStateChange(
                    async (event, session) => {
                        setUser(session?.user ?? null);
                        setLoading(false);
                    }
                );

                return () => subscription.unsubscribe();
            }, []);

            return React.createElement(
                AuthContext.Provider,
                { value: { user, loading } },
                children
            );
        }

        // Login Component
        function Login() {
            const [email, setEmail] = useState('');
            const [password, setPassword] = useState('');
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState('');
            const [isSignUp, setIsSignUp] = useState(false);

            const handleSubmit = async (e) => {
                e.preventDefault();
                setLoading(true);
                setError('');

                try {
                    if (isSignUp) {
                        const { error } = await supabase.auth.signUp({
                            email,
                            password,
                        });
                        if (error) throw error;
                        alert('Check your email for the confirmation link!');
                    } else {
                        const { error } = await supabase.auth.signInWithPassword({
                            email,
                            password,
                        });
                        if (error) throw error;
                    }
                } catch (error) {
                    setError(error.message);
                }
                setLoading(false);
            };

            return React.createElement('div', { className: "min-h-screen bg-gray-50 flex items-center justify-center" },
                React.createElement('div', { className: "max-w-md w-full space-y-8" },
                    React.createElement('div', null,
                        React.createElement('h2', { className: "mt-6 text-center text-3xl font-extrabold text-gray-900" },
                            isSignUp ? 'Create your account' : 'Sign in to ReorderFlow'
                        )
                    ),
                    React.createElement('form', { className: "mt-8 space-y-6", onSubmit: handleSubmit },
                        React.createElement('div', { className: "rounded-md shadow-sm -space-y-px" },
                            React.createElement('div', null,
                                React.createElement('input', {
                                    type: "email",
                                    required: true,
                                    className: "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm",
                                    placeholder: "Email address",
                                    value: email,
                                    onChange: (e) => setEmail(e.target.value)
                                })
                            ),
                            React.createElement('div', null,
                                React.createElement('input', {
                                    type: "password",
                                    required: true,
                                    className: "appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm",
                                    placeholder: "Password",
                                    value: password,
                                    onChange: (e) => setPassword(e.target.value)
                                })
                            )
                        ),
                        error && React.createElement('div', { className: "text-red-600 text-sm text-center" }, error),
                        React.createElement('div', null,
                            React.createElement('button', {
                                type: "submit",
                                disabled: loading,
                                className: "group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
                            },
                                loading ? React.createElement('div', { className: "spinner" }) : (isSignUp ? 'Sign up' : 'Sign in')
                            )
                        ),
                        React.createElement('div', { className: "text-center" },
                            React.createElement('button', {
                                type: "button",
                                className: "text-blue-600 hover:text-blue-500",
                                onClick: () => setIsSignUp(!isSignUp)
                            },
                                isSignUp ? 'Already have an account? Sign in' : "Don't have an account? Sign up"
                            )
                        )
                    )
                )
            );
        }

        // Simple Dashboard Component
        function Dashboard() {
            const { user } = useContext(AuthContext);
            const [activeTab, setActiveTab] = useState('dashboard');

            const signOut = async () => {
                await supabase.auth.signOut();
            };

            const tabs = [
                { id: 'dashboard', name: 'Dashboard', icon: '📊' },
                { id: 'contacts', name: 'Contacts', icon: '👥' },
                { id: 'products', name: 'Products', icon: '📦' },
                { id: 'reminders', name: 'Reminders', icon: '⏰' },
                { id: 'settings', name: 'Settings', icon: '⚙️' },
            ];

            const handleTabClick = (tabId) => {
                console.log('Tab clicked:', tabId);
                setActiveTab(tabId);
            };

            return React.createElement('div', { className: "min-h-screen bg-gray-50" },
                // Navigation
                React.createElement('nav', { className: "bg-white shadow-sm border-b" },
                    React.createElement('div', { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" },
                        React.createElement('div', { className: "flex justify-between h-16" },
                            React.createElement('div', { className: "flex" },
                                React.createElement('div', { className: "flex-shrink-0 flex items-center" },
                                    React.createElement('h1', { className: "text-xl font-bold text-blue-600" }, 'ReorderFlow')
                                ),
                                React.createElement('div', { className: "hidden sm:ml-6 sm:flex sm:space-x-8" },
                                    tabs.map((tab) =>
                                        React.createElement('button', {
                                            key: tab.id,
                                            onClick: () => handleTabClick(tab.id),
                                            className: `${
                                                activeTab === tab.id
                                                    ? 'border-blue-500 text-gray-900'
                                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                            } whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm inline-flex items-center cursor-pointer`
                                        },
                                            React.createElement('span', { className: "mr-2" }, tab.icon),
                                            tab.name
                                        )
                                    )
                                )
                            ),
                            React.createElement('div', { className: "flex items-center" },
                                React.createElement('span', { className: "text-gray-700 mr-4" }, `Welcome, ${user?.email}`),
                                React.createElement('button', {
                                    onClick: signOut,
                                    className: "bg-gray-100 text-gray-700 px-3 py-2 rounded-md text-sm font-medium hover:bg-gray-200"
                                }, 'Sign out')
                            )
                        )
                    )
                ),
                // Main content
                React.createElement('main', { className: "max-w-7xl mx-auto py-6 sm:px-6 lg:px-8" },
                    React.createElement('div', { className: "space-y-6" },
                        React.createElement('h1', { className: "text-2xl font-bold text-gray-900" }, 
                            activeTab.charAt(0).toUpperCase() + activeTab.slice(1)
                        ),
                        // Dashboard content
                        activeTab === 'dashboard' && React.createElement('div', null,
                            React.createElement('div', { className: "grid grid-cols-1 md:grid-cols-4 gap-6" },
                                React.createElement('div', { className: "bg-white overflow-hidden shadow rounded-lg" },
                                    React.createElement('div', { className: "p-5" },
                                        React.createElement('div', { className: "flex items-center" },
                                            React.createElement('div', { className: "flex-shrink-0" },
                                                React.createElement('span', { className: "text-2xl" }, '👥')
                                            ),
                                            React.createElement('div', { className: "ml-5 w-0 flex-1" },
                                                React.createElement('dl', null,
                                                    React.createElement('dt', { className: "text-sm font-medium text-gray-500 truncate" }, 'Total Contacts'),
                                                    React.createElement('dd', { className: "text-lg font-medium text-gray-900" }, '0')
                                                )
                                            )
                                        )
                                    )
                                ),
                                React.createElement('div', { className: "bg-white overflow-hidden shadow rounded-lg" },
                                    React.createElement('div', { className: "p-5" },
                                        React.createElement('div', { className: "flex items-center" },
                                            React.createElement('div', { className: "flex-shrink-0" },
                                                React.createElement('span', { className: "text-2xl" }, '📦')
                                            ),
                                            React.createElement('div', { className: "ml-5 w-0 flex-1" },
                                                React.createElement('dl', null,
                                                    React.createElement('dt', { className: "text-sm font-medium text-gray-500 truncate" }, 'Products'),
                                                    React.createElement('dd', { className: "text-lg font-medium text-gray-900" }, '0')
                                                )
                                            )
                                        )
                                    )
                                ),
                                React.createElement('div', { className: "bg-white overflow-hidden shadow rounded-lg" },
                                    React.createElement('div', { className: "p-5" },
                                        React.createElement('div', { className: "flex items-center" },
                                            React.createElement('div', { className: "flex-shrink-0" },
                                                React.createElement('span', { className: "text-2xl" }, '⏰')
                                            ),
                                            React.createElement('div', { className: "ml-5 w-0 flex-1" },
                                                React.createElement('dl', null,
                                                    React.createElement('dt', { className: "text-sm font-medium text-gray-500 truncate" }, 'Pending Reminders'),
                                                    React.createElement('dd', { className: "text-lg font-medium text-gray-900" }, '0')
                                                )
                                            )
                                        )
                                    )
                                ),
                                React.createElement('div', { className: "bg-white overflow-hidden shadow rounded-lg" },
                                    React.createElement('div', { className: "p-5" },
                                        React.createElement('div', { className: "flex items-center" },
                                            React.createElement('div', { className: "flex-shrink-0" },
                                                React.createElement('span', { className: "text-2xl" }, '📤')
                                            ),
                                            React.createElement('div', { className: "ml-5 w-0 flex-1" },
                                                React.createElement('dl', null,
                                                    React.createElement('dt', { className: "text-sm font-medium text-gray-500 truncate" }, 'Sent Today'),
                                                    React.createElement('dd', { className: "text-lg font-medium text-gray-900" }, '0')
                                                )
                                            )
                                        )
                                    )
                                )
                            ),
                            React.createElement('div', { className: "bg-white shadow rounded-lg" },
                                React.createElement('div', { className: "px-4 py-5 sm:p-6" },
                                    React.createElement('h3', { className: "text-lg leading-6 font-medium text-gray-900" }, 'Upcoming Reminders'),
                                    React.createElement('div', { className: "mt-5" },
                                        React.createElement('p', { className: "text-gray-500" }, 'No upcoming reminders. Add some contacts and products to get started!')
                                    )
                                )
                            )
                        ),
                        // Other tabs
                        activeTab === 'contacts' && React.createElement('div', { className: "bg-white shadow rounded-lg p-6" },
                            React.createElement('h3', { className: "text-lg font-medium mb-4" }, 'Contacts Management'),
                            React.createElement('p', { className: "text-gray-600" }, 'Contact management functionality coming soon. For now, you can see the tab navigation is working!')
                        ),
                        activeTab === 'products' && React.createElement('div', { className: "bg-white shadow rounded-lg p-6" },
                            React.createElement('h3', { className: "text-lg font-medium mb-4" }, 'Products Management'),
                            React.createElement('p', { className: "text-gray-600" }, 'Product management functionality coming soon. Tab switching is working!')
                        ),
                        activeTab === 'reminders' && React.createElement('div', { className: "bg-white shadow rounded-lg p-6" },
                            React.createElement('h3', { className: "text-lg font-medium mb-4" }, 'Reminders Management'),
                            React.createElement('p', { className: "text-gray-600" }, 'Reminder management functionality coming soon. Navigation is working!')
                        ),
                        activeTab === 'settings' && React.createElement('div', { className: "bg-white shadow rounded-lg p-6" },
                            React.createElement('h3', { className: "text-lg font-medium mb-4" }, 'Settings'),
                            React.createElement('p', { className: "text-gray-600" }, 'Settings functionality coming soon. Tab navigation is working!')
                        )
                    )
                )
            );
        }

        // Main App Component
        function App() {
            const { user, loading } = useContext(AuthContext);

            if (loading) {
                return React.createElement('div', { className: "min-h-screen bg-gray-50 flex items-center justify-center" },
                    React.createElement('div', { className: "text-center" },
                        React.createElement('div', { className: "spinner mb-4" }),
                        React.createElement('p', { className: "text-gray-500" }, 'Loading...')
                    )
                );
            }

            if (!user) {
                return React.createElement(Login);
            }

            return React.createElement(Dashboard);
        }

        // Check if credentials are configured
        const isConfigured = SUPABASE_URL !== 'YOUR_SUPABASE_URL_HERE' && SUPABASE_ANON_KEY !== 'YOUR_SUPABASE_ANON_KEY_HERE';

        if (!isConfigured) {
            ReactDOM.render(
                React.createElement('div', { className: "min-h-screen bg-gray-50 flex items-center justify-center p-4" },
                    React.createElement('div', { className: "max-w-2xl w-full bg-white rounded-lg shadow-lg p-8" },
                        React.createElement('h1', { className: "text-2xl font-bold text-gray-900 mb-6" }, '🚀 Setup Required'),
                        React.createElement('p', { className: "text-gray-600" }, 'Please update your Supabase credentials in the code.')
                    )
                ),
                document.getElementById('root')
            );
        } else {
            // Render the app
            ReactDOM.render(
                React.createElement(AuthProvider, null,
                    React.createElement(App)
                ),
                document.getElementById('root')
            );
        }
    </script>
</body>
</html>
